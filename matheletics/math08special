There are N students in a class, each with a distinct roll number from 1 to N. In the morning, the entire class assembles for the prayer and all the students stand in a line.

One day, the class teacher observes that:

“The roll number of the student standing at the ith position from the beginning in the line is the pth smallest number among the roll numbers of the first i students standing in the line, where p is either 1 or a prime number.”

The teacher calls this a “Special Arrangement”.

Find the number of such “Special Arrangements” that are possible for a given N.

Output the sum of digits of the above calculated result.




def ref(n: Int) = {
  val divs = (1 to n) map ( i => if (i % 2 == 0) i / 2 else i)
  (1 to n).permutations.count(l => (l.view.scanLeft(0)(_+_).drop(1) zip divs) forall(a => a._1 % a._2 == 0))
}



def ref(n: Int) = (1 to n).permutations.count(l => l.view.zipWithIndex.forall({x => val c = l.view.take(x._2+1).count(_ <= x._1); c == 1 || pc.contains(c)} ) )

def fast(n: Int) = {
  var f = 1;
  var res = BigInt(1);
  for (i <- 2 to n) {
    if (pc.contains(i)) f+=1;
    res *= f;
  }
  println(res)
  res.toString.map(_-'0').sum
}
